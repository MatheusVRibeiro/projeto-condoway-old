import { useState, useEffect } from 'react';
import { apiService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

/**
 * Hook customizado para gerenciar dados do condom√≠nio
 */
export const useCondominio = (condominioId = null) => {
  const { user } = useAuth();
  const [condominioData, setCondominioData] = useState(null);
  const [condominios, setCondominios] = useState([]);
  const [estatisticas, setEstatisticas] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // ID do condom√≠nio pode vir do par√¢metro ou do usu√°rio logado
  // Tenta todos os formatos poss√≠veis: Cond_ID, cond_id, condId
  const condId = condominioId || user?.Cond_ID || user?.cond_id || user?.condId;
  
  console.log('üèòÔ∏è [useCondominio] condId:', condId);
  console.log('üë§ [useCondominio] user dispon√≠vel:', {
    Cond_ID: user?.Cond_ID,
    cond_id: user?.cond_id,
    condId: user?.condId
  });

  /**
   * Busca informa√ß√µes de um condom√≠nio espec√≠fico
   */
  const loadCondominio = async (id = condId) => {
    if (!id) {
      console.warn('‚ö†Ô∏è [useCondominio] ID do condom√≠nio n√£o fornecido');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      console.log(`üîÑ [useCondominio] Carregando condom√≠nio com ID: ${id}...`);
      
      const response = await apiService.buscarCondominio(id);
      
      if (response.sucesso && response.dados) {
        setCondominioData(response.dados);
        console.log('‚úÖ [useCondominio] Condom√≠nio carregado:', response.dados);
        console.log('üìç [useCondominio] Endere√ßo:', response.dados.cond_endereco);
        console.log('üèôÔ∏è [useCondominio] Cidade:', response.dados.cond_cidade);
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao carregar condom√≠nio:', err);
      setError(err.message || 'Erro ao carregar condom√≠nio');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Lista todos os condom√≠nios
   */
  const loadCondominios = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [useCondominio] Listando condom√≠nios...');
      
      const response = await apiService.listarCondominios();
      
      if (response.sucesso && response.dados) {
        setCondominios(response.dados);
        console.log('‚úÖ [useCondominio] Condom√≠nios carregados:', response.dados);
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao listar condom√≠nios:', err);
      setError(err.message || 'Erro ao listar condom√≠nios');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Cria um novo condom√≠nio
   */
  const createCondominio = async (dadosCondominio) => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [useCondominio] Criando condom√≠nio...', dadosCondominio);
      
      const response = await apiService.criarCondominio(dadosCondominio);
      
      if (response.sucesso && response.dados) {
        console.log('‚úÖ [useCondominio] Condom√≠nio criado com sucesso');
        
        // Atualiza a lista de condom√≠nios
        setCondominios(prev => [...prev, response.dados]);
        
        return response.dados;
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao criar condom√≠nio:', err);
      setError(err.message || 'Erro ao criar condom√≠nio');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Atualiza informa√ß√µes do condom√≠nio
   */
  const updateCondominio = async (id, dadosCondominio) => {
    const condominioId = id || condId;
    
    if (!condominioId) {
      throw new Error('ID do condom√≠nio n√£o fornecido');
    }

    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [useCondominio] Atualizando condom√≠nio...', dadosCondominio);
      
      const response = await apiService.atualizarCondominio(condominioId, dadosCondominio);
      
      if (response.sucesso && response.dados) {
        setCondominioData(response.dados);
        
        // Atualiza tamb√©m na lista se estiver carregada
        setCondominios(prev => 
          prev.map(c => c.cond_id === condominioId ? response.dados : c)
        );
        
        console.log('‚úÖ [useCondominio] Condom√≠nio atualizado com sucesso');
        return response.dados;
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao atualizar condom√≠nio:', err);
      setError(err.message || 'Erro ao atualizar condom√≠nio');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Deleta um condom√≠nio
   */
  const deleteCondominio = async (id) => {
    const condominioId = id || condId;
    
    if (!condominioId) {
      throw new Error('ID do condom√≠nio n√£o fornecido');
    }

    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [useCondominio] Deletando condom√≠nio...');
      
      const response = await apiService.deletarCondominio(condominioId);
      
      if (response.sucesso) {
        // Remove da lista
        setCondominios(prev => prev.filter(c => c.cond_id !== condominioId));
        
        // Limpa os dados se for o condom√≠nio atual
        if (condominioId === condId) {
          setCondominioData(null);
        }
        
        console.log('‚úÖ [useCondominio] Condom√≠nio deletado com sucesso');
        return true;
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao deletar condom√≠nio:', err);
      setError(err.message || 'Erro ao deletar condom√≠nio');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Busca estat√≠sticas do condom√≠nio
   */
  const loadEstatisticas = async (id = condId) => {
    if (!id) {
      console.warn('‚ö†Ô∏è [useCondominio] ID do condom√≠nio n√£o fornecido');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [useCondominio] Carregando estat√≠sticas...');
      
      const response = await apiService.buscarEstatisticasCondominio(id);
      
      if (response.sucesso && response.dados) {
        setEstatisticas(response.dados);
        console.log('‚úÖ [useCondominio] Estat√≠sticas carregadas:', response.dados);
      }
    } catch (err) {
      console.error('‚ùå [useCondominio] Erro ao carregar estat√≠sticas:', err);
      setError(err.message || 'Erro ao carregar estat√≠sticas');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Carrega o condom√≠nio automaticamente quando dispon√≠vel
   */
  useEffect(() => {
    if (condId && !condominioData) {
      loadCondominio(condId);
    }
  }, [condId]);

  return {
    // Estados
    condominioData,
    condominios,
    estatisticas,
    loading,
    error,
    
    // Fun√ß√µes
    loadCondominio,
    loadCondominios,
    createCondominio,
    updateCondominio,
    deleteCondominio,
    loadEstatisticas,
    
    // Utilit√°rios
    condominioId: condId,
  };
};
